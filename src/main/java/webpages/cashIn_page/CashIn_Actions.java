package webpages.cashIn_page;

import io.qameta.allure.Step;
import org.openqa.selenium.WebDriver;
import org.testng.Assert;

public class CashIn_Actions extends CashIn_WebElements {

    /*****************************************CONSTRUCTORS*******************************************/
    public CashIn_Actions(WebDriver driver) {
        super(driver);
    }

    /*****************************************METHODS************************************************/
    @Step("Enters a mobile number of a consumer with Axis wallet.")
    public void insert_Mobile_Number(String consumer_Wallet_Number)
    {
        writeText(mobile_Number_Txt,consumer_Wallet_Number);
    }

    @Step("Enters Amount")
    public void insert_Amount(String amount)
    {
        writeText(amount_Txt, amount);
    }

    @Step("Enters Agent's mPIN")
    public void enter_mPIN(String mPIN)
    {
        writeText(first_mPIN_Txt, mPIN);
    }

    @Step("Clicks \"Review Details\" button.")
    public void click_Review_Details(String amount, String fees)
    {
        clickWebElement(review_Details_Btn);
        validate_ReviewDetails_Popup();
    }

    @Step("Enters Agent's mPIN")
    public void enter_Agent_mPIN(String mPIN)
    {
        writeText(second_mPIN_Txt, mPIN);
    }

    /**
     * This is a method to enter a fake random generated OTP to cash-in money for offUs consumer
     * @param OTP and random number generated by Faker class
     */
    @Step("Enters OffUs-consumer's OTP")
    public void enter_Random_OffUs_OTP(String OTP)
    {
        writeText(OTP_Txt,OTP);
    }

    /**
     * This method can be only used when I integrate REST_ASSURED with this framework,
     * where I call "Generate OTP" API, and take the OTP from the response to be used,
     * other than that, I can run this scenario e2e in "Axis_Integrations" project.
     * @param OTP should be the generated OTP from Axis-consumer's app taken from API-response
     */
    @Step("Enters OnUs-generated OTP")
    public void enter_Generated_OnUs_OTP(String OTP)
    {
        writeText(OTP_Txt,OTP);
    }

    @Step("Clicks cash-in button")
    public void click_CashIn()
    {
        clickWebElement(cashIn_Btn);
        wait_Element_Visibility(5,trx_Processing_PopUp);
        Assert.assertTrue(trx_Processing_PopUp.getText().contains("Your transaction is processing..."));
    }

    /********************************************ASSERTIONS*****************************************************/
    public void validate_ReviewDetails_Popup()
    {
        wait_Text_In_Element(10,review_Details_Popup,"Review Details");
        String expected_Result = "Review Details";
        String actual_Result = review_Details_Popup.getText();
        Assert.assertEquals(actual_Result, expected_Result, "Review Details popup is shown. validation");
    }

    /**
     * Plz document this method cuz it's important and have great logic
     * @param amount
     * @param fees
     */
    public void validate_Total_Amount_With_Flat_Fees(String amount, String fees)
    {
        wait_Text_In_Element(10, amount_Label, "Amount");
        String actual_amount = amount_Value_EGP.getText();//it's another way i wanna try to get text; getAttribute("textContent");
        System.out.println(actual_amount);
        Assert.assertTrue(actual_amount.contains(amount), "amount displayed is the same amount written by the agent. validation");

        wait_Text_In_Element(10, fees_Label, "Fees");
        String actual_Fees = fees_Value_EGP.getText();
        System.out.println(actual_Fees);
        Assert.assertTrue(actual_Fees.contains(fees), "Applied fees are the correct amount configured in the DB for the On-us consumer's profile. Validation");

        wait_Text_In_Element(10, totalAmount_Label, "Total Amount");
        int actual_totalAmount = Integer.parseInt(totalAmount_Value_EGP.getText().replace(" EGP",""));
        System.out.println(actual_totalAmount);
        int expected_Total_Amount = Integer.parseInt(amount) + Integer.parseInt(fees);
        Assert.assertEquals(actual_totalAmount,expected_Total_Amount,"Total amount is calculated correctly. Validation");
    }

    public void validate_Total_Amount_with_Percentage_Fees(String amount)
    {
        wait_Text_In_Element(10, amount_Label, "Amount");
        String actual_amount = amount_Value_EGP.getText();//it's another way i wanna try to get text; getAttribute("textContent");
        System.out.println(actual_amount);
        Assert.assertTrue(actual_amount.contains(amount), "amount displayed is the same amount written by the agent. validation");

        wait_Text_In_Element(10, fees_Label, "Fees");
        double expected_Fees = Double.parseDouble(amount) * 0.003;
        double actual_Fees = Double.parseDouble(fees_Value_EGP.getText().replace(" EGP",""));
        Assert.assertEquals(actual_Fees, expected_Fees, "Percentage Fee is calculated wrong.");
    }

    /**
     * This is assertion will be only used when I call the API and use the OTP to continue the flow
     * of Cash-in for Axis-consumers.
     */
    public void validate_OnUs_Trx_Slip()
    {
        wait_Element_Visibility(20,print_Receipt_Btn);
    }


}
